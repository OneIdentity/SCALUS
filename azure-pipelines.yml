trigger:
- master
- release*

parameters:
  - name: edition
    displayName: 'Build Edition'
    type: string
    default: 'community'
    values:
    - community
    - supported

name: $(Date:yyyyMMdd).$(Rev:r)_${{ parameters.edition }}

variables:
  version: '1.1.0.$(Revision)'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  signToolPath: 'C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe'
  isRelease: $[ startswith(variables['Build.SourceBranch'], 'refs/heads/release-')]

jobs:
- job: BuildAndTest
  displayName: 'Build & Test - ${{ parameters.edition }}'
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: echo 'SCALUS Version - $(version)'
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      msbuildArgs: '/p:Edition="${{ parameters.edition }}" /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: VSTest@2
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        **\*.Test.dll
        !**\*TestAdapter.dll
        !**\obj\**
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

- job: Windows
  dependsOn: BuildAndTest
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: AzureKeyVault@2
    displayName: 'Get code signing certificate from Azure Key Vault'
    inputs:
      # The "Safeguard Privileged Passwords" project in Azure has been setup with a new Connected Service under Project Settings > Service Connections.
      # We may not have permissions to view them, but they are there. And this service connection should then have access to
      # the SPPCodeSigning Key Vault under the OneIdentity.Ops.SaaS.AzureDevOpsInfrastructure subscription, in the CodeSigningCertificates
      # resource group.
      ConnectedServiceName: "OneIdentity.Infrastructure.SPPCodeSigning"
      KeyVaultName: "SPPCodeSigning"
      SecretsFilter: "SPPCodeSigning-Password, SPPCodeSigning-TotpPrivateKey"
    # # PRs from repository forks are not allowed to access secrets in the pipeline. For more information see https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#access-restrictions
    condition: and(succeeded(), eq(variables.isRelease, true))
  
  # SSL.com example:
  # https://www.ssl.com/how-to/how-to-integrate-esigner-cka-with-ci-cd-tools-for-automated-code-signing/#ftoc-heading-1
  # and click on the Azure Pipeline tab.
  - powershell: |
      # Download and unzip eSignerCKA setup. This downloads their latest version, which when unzipped has
      # a file name that also contains the version number. So we need to move it to a known name.
      Invoke-WebRequest -OutFile eSigner_CKA_Setup.zip "https://www.ssl.com/download/ssl-com-esigner-cka"
      Expand-Archive -Force eSigner_CKA_Setup.zip
      Remove-Item eSigner_CKA_Setup.zip
      Move-Item -Path "eSigner_CKA_*\*.exe" -Destination "eSigner_CKA_Installer.exe"
    displayName: "Download and Unzip eSignerCKA Setup"
    condition: and(succeeded(), eq(variables.isRelease, true))
  
  - powershell: |
      .\eSigner_CKA_Installer.exe /CURRENTUSER /VERYSILENT /SUPPRESSMSGBOXES /DIR="$(Build.SourcesDirectory)\eSignerCKA" | Out-Null
      dir $(Build.SourcesDirectory)\eSignerCKA
    displayName: "Setup eSignerCKA in silent mode and output installation directory"
    condition: and(succeeded(), eq(variables.isRelease, true))
  
  - powershell: |
      $(Build.SourcesDirectory)\eSignerCKA\eSignerCKATool.exe config -mode "product" -user "ssl.oid.safeguardpp@groups.quest.com" -pass "$(SPPCodeSigning-Password)" -totp "$(SPPCodeSigning-TotpPrivateKey)" -key "$(Build.SourcesDirectory)\eSignerCKA\master.key" -r
    displayName: "Configure account information on eSignerCKA using Azure Key Vault values"
    condition: and(succeeded(), eq(variables.isRelease, true))
  
  - powershell: |
      $(Build.SourcesDirectory)\eSignerCKA\eSignerCKATool.exe unload
      $(Build.SourcesDirectory)\eSignerCKA\eSignerCKATool.exe load
    displayName: "Unload and load certificate into Windows Certificate Store"
    condition: and(succeeded(), eq(variables.isRelease, true))
  
  # We should now be able to access the certificate using the standard Windows signtool.exe from the Windows SDK,
  # which should be installed on the build agent images being used.
  #
  # Typically, you often see examples of signtool.exe and other things accessing the certificate by the thumbprint.
  # And in fact, the sample SSL.com code includes a bunch of extra PowerShell script to get the thumbprint. However,
  # signtool.exe can also access the certificate by a partial subject name match. We'll do that here in hopes that
  # when the certificate is renewed, the subject name will remain the same, and we won't have to change this.
  # "signtool.exe" sign /fd sha256 /tr http://ts.ssl.com /td sha256 /n "One Identity LLC" "C:\path\to\program.exe"

  - task: UseDotNet@2
    inputs:
        version: '6.0.x'

  - task: Cake@2
    inputs:
      script: 'build.cake'
      target: 'Default'
      verbosity: 'Verbose'
      version: '2.2.0'
      arguments: '--runtime=win10-x64 --Edition=${{ parameters.edition }} --Version=$(version) --SignFiles=$(isRelease) --SignToolPath="$(signToolPath)"'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/s/Output/Release/win10-x64'
      artifact: 'Scalus-Win10'
      publishLocation: 'pipeline'

- job: Linux
  dependsOn: BuildAndTest
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseDotNet@2
    inputs:
        version: '6.0.x'

  - task: Cake@2
    inputs:
      script: 'build.cake'
      target: 'Default'
      verbosity: 'Verbose'
      version: '2.2.0'
      arguments: '--runtime=linux-x64 --Edition=${{ parameters.edition }} --Version=$(version)'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/s/Output/Release/linux-x64'
      artifact: 'Scalus-Linux'
      publishLocation: 'pipeline'

- job: Mac
  dependsOn: BuildAndTest
  pool:
    vmImage: 'macOS-latest'
  steps:
  - task: UseDotNet@2
    inputs:
        version: '6.0.x'

  - task: AzureKeyVault@2
    inputs:  
      ConnectedServiceName: "OneIdentity.Infrastructure.SPPCodeSigning"
      KeyVaultName: "SPPCodeSigning"
      SecretsFilter: 'AppleCertificate-Installer-Cert,AppleCertificate-Installer-Password,AppleCertificate-Application-Cert,Apple-App-Specific-Password'
    condition: and(succeeded(), eq(variables.isRelease, true))

  - powershell: |
         $kvSecretBytes = [System.Convert]::FromBase64String("$(AppleCertificate-Installer-Cert)")
         $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
         $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
         $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12,"$(AppleCertificate-Installer-Password)")
         $certpath = '$(Build.SourcesDirectory)/$(ProductSigningCertFileName)'
         Write-Verbose -Verbose $certpath
         [System.IO.File]::WriteAllBytes($certpath, $protectedCertificateBytes)
         sudo security import $certpath -k /Library/Keychains/System.keychain -P $(AppleCertificate-Installer-Password) -A -t cert -f pkcs12
    displayName: 'Save Apple product signing certificate to PFX file'
    condition: and(succeeded(), eq(variables.isRelease, true))

  - powershell: |
        $kvSecretBytes = [System.Convert]::FromBase64String("$(AppleCertificate-Application-Cert)")
        $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
        $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12,"$(AppleCertificate-Installer-Password)")
        $certpath = '$(Build.SourcesDirectory)/$(CodeSigningCertFileName)'
        Write-Verbose -Verbose $certpath
        [System.IO.File]::WriteAllBytes($certpath, $protectedCertificateBytes)
        sudo security import $certpath -k /Library/Keychains/System.keychain -P $(AppleCertificate-Installer-Password) -A -t cert -f pkcs12
    displayName: 'Save Apple code signing certificate to PFX file'
    condition: and(succeeded(), eq(variables.isRelease, true))

  - task: DeleteFiles@1
    displayName: 'Delete product signing certificate files'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: '$(ProductSigningCertFileName)'
    condition: and(succeededOrFailed(), eq(variables.isRelease, true))

  - task: DeleteFiles@1
    displayName: 'Delete code signing certificate files'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: '$(CodeSigningCertFileName)'
    condition: and(succeededOrFailed(), eq(variables.isRelease, true))

  - task: Bash@3
    inputs:
      filePath: '$(Pipeline.Workspace)/s/scripts/Osx/scalusmacBuild.sh'
      arguments: "--scalusmacdir $(Pipeline.Workspace)/s/scalusmac"

  - task: Cake@2
    inputs:
      script: 'buildMac.cake'
      target: 'Default'
      verbosity: 'Verbose'
      version: '2.2.0'
      arguments: '--runtime=osx-x64 --Edition=${{ parameters.edition }} --Version=$(version)'

  - task: Bash@3
    inputs:
      filePath: '$(Pipeline.Workspace)/s/scripts/Osx/package.sh'
      arguments: '--version $(version) --runtime osx-x64 --infile $(Pipeline.Workspace)/s/scripts/Osx/applet --outpath $(Pipeline.Workspace)/s/Output/Release/osx-x64 --publishdir $(Pipeline.Workspace)/s/Publish/Release/osx-x64 --scalusmacdir $(Pipeline.Workspace)/s/scalusmac'
      
  - powershell: |  
      sudo productsign --sign 'LDBTVAT43D' $(Pipeline.Workspace)/s/Output/Release/osx-x64/scalus-$(version)-osx-x64.pkg $(Pipeline.Workspace)/s/Output/Release/osx-x64/scalus-$(version)-osx-x64_Signed.pkg
    displayName: 'x64-ProductSigning'
    condition: and(succeeded(), eq(variables.isRelease, true))
    
  - script: |
        # Upload the pkg to the Apple Notary Service
        xcrun notarytool submit \
            --apple-id "One.Identity.Apple.Developer@oneidentity.com" \
            --password "$(Apple-App-Specific-Password)" \
            --team-id "LDBTVAT43D" \
            --wait \
            $(Pipeline.Workspace)/s/Output/Release/osx-x64/scalus-$(version)-osx-x64_Signed.pkg \
    displayName: 'Upload and notarize'
    condition: and(succeeded(), eq(variables.isRelease, true))

  - powershell: |
      sudo xcrun stapler staple $(Pipeline.Workspace)/s/Output/Release/osx-x64/scalus-$(version)-osx-x64_Signed.pkg
    displayName: 'Staple'
    condition: and(succeeded(), eq(variables.isRelease, true))

  - powershell: |
      spctl -vvv --assess --type install $(Pipeline.Workspace)/s/Output/Release/osx-x64/scalus-$(version)-osx-x64_Signed.pkg
    displayName: 'Check if run with the system policies'
    condition: and(succeeded(), eq(variables.isRelease, true))

  - powershell: |
      Move-Item -Path "$(Pipeline.Workspace)/s/Output/Release/osx-x64/scalus-$(version)-osx-x64_Signed.pkg" -Destination "$(Pipeline.Workspace)/s/Output/Release/osx-x64/scalus-$(version)-osx-x64.pkg" -Force
    displayName: 'Replace signed files'
    condition: and(succeeded(), eq(variables.isRelease, true))

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/s/Output/Release/osx-x64'
      artifact: 'Scalus-Osx'
      publishLocation: 'pipeline'
